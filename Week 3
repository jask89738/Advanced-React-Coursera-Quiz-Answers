Final graded quiz: Advanced React Quiz Answers
August 29, 2023 By Niyander
In this article i am gone to share Coursera Course: Advanced React by Meta Week 4 | Final graded quiz: Advanced React Quiz Answers with you..

Enroll Link: Advanced React

Advanced React Coursera Quiz Answers
Also visit this link:  Module quiz: JSX and Testing Quiz Answers

 

Final graded quiz: Advanced React Quiz Answers
Question 1)
You are building a form using both Formik and Yup libraries, where one of the inputs is an email. Here are this input’s client validation rules:

It has to be a valid email address.
If the email input is invalid, a message “Invalid email address” will be displayed.
If the email input is blank, a message “Required” will be shown.
Based on the above requirements, choose the correct Yup validation code from the provided options.

Yup.email(“Invalid email address”).required(“Required”).
Yup.email().string(“Invalid email address”).required(“Required”)
Yup.string().email(“Invalid email address”).required(“Required”)
 

Question 2)
You have the following React application where you have a ToDo component that has 2 text labels and an uncontrolled text input and the entry point App component that renders a list of two ToDos and a button to reverse the order of the ToDos. To avoid a React keys warning, a key is provided to each ToDo component, with the index as its value. Suppose that the next sequence of events happen in the application:

1. You write “Do laundry” in the first ToDo input
2. You write “Go shopping” in the second ToDo input
3. You click the button to reverse the order

What would happen on the screen after that?

const ToDo = props => (
    <tr>
        <td>
            <label>{props.id}</label>
        </td>
        <td>
            <input />
        </td>
        <td>
            <label>{props.createdAt}</label>
        </td>
    </tr>
);
function App() {
    const [todos, setTodos] = useState([
        {
            id: 'todo1',
            createdAt: '18:00',
        }, 
        {
            id: 'todo2',
            createdAt: '20:30',
        }
    ]);
    const reverseOrder = () => {
        // Reverse is a mutative operation, so we need to create a new array first.
        setTodos([...todos].reverse());
    };
    return (
        <div>
            <button onClick={reverseOrder}>Reverse</button>
            {todos.map((todo, index) => (
                <ToDo key={index} id={todo.id} createdAt={todo.createdAt} />
            ))}
        </div>
    );
}
 

todo2 Do laundry 20:30
todo1 Go shopping 18:00
todo1 Go shopping 18:00
todo2 Do laundry 20:30
todo2 Go shopping 20:30
todo1 Do laundry 18:00
 

Question 3)
True or false: There are at least two errors in the code below.

import{ createContext, useContext, useState} from"react";
const ThemeContext = createContext(undefined);
export const ThemeProvider= () => {
    const[theme, setTheme] = useState("light");
    return(
        <ThemeContext.Provider
            value={{
                theme,
                toggleTheme: () => setTheme(!theme),
            }}
        >
        </ThemeContext.Provider>
    );
};
 

True
False
 

Question 4)
Select all the statements that are true for React elements:

Each element object should have at least two properties: type and children
The type of an element can be a DOM node, like a HTML button.
The type of an element can be a function corresponding to a React component, like a SubmitButton.
A tree of elements can mix and match both components and DOM elements as the type property.
 

Question 5)
True or false: When the user clicks the Submit button, the “WithClick” string will never be output to the console.

const Button = ({ children, ...rest }) => (
    <button onClick={() => console.log("ButtonClick")} {...rest}>
        {children}
    </button>
);
const withClick = (Component) => {
    const handleClick = () => {
        console.log("WithClick");
    };
    return(props) => {
        return<Component {...props} onClick={handleClick} />;
    };
};
const MyButton = withClick(Button);
export default function App() {
    return <MyButton onClick={() => console.log("AppClick")}>Submit</MyButton>;
}
 

True
False
 

Question 6)
When writing a test for a React component using jest and react-testing-library, how would you assert that a function has been called with some specific arguments?

Using the toHaveBeenCalled matcher.
Using the toHaveAttribute matcher.
Using the toHaveBeenCalledWith matcher.
 

Question 7)
True or false: The following piece of code is an example of the render props pattern.

<LoginUser renderUser={<p>Mark</p>} />
 

True
False
 

Question 8)
What do you need to add to this code to make the useEffect run only once?

React.useEffect(()=> {
    console.log('The value of the person variable is', person)
})
 

Add an empty dependency array.
Move the console.log outside of the arrow function
Move the console.log outside of the useEffect function
 

Question 9)
You are given the below piece of code.

import {useState} from "react";
export default function App() {
const [restaurantName, setRestaurantName] = useState("Lemon");
function updateRestaurantName() {
setRestaurantName("Little Lemon");
};
return (
 

True or false: The restaurantName variable’s value will always be reset between re-renders of the App component.

True
False
 

Question 10)
The below code is not valid, because:

if (data !== '') {
    useEffect(() => {
        setData('test data');
    });
}
 
